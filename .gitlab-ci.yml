variables:
  PYTHON_IMAGE: python:3.10
  REGION: "europe-west1"
  REPO_NAME: "yu-python-repo"
  PYTHON_MAIN_DIR: python
  MY_PACKAGES_1_PATH: my_packages_1
  MY_PACKAGES_2_PATH: my_packages_2
  MY_PACKAGES_3_PATH: my_packages_3
  MY_LIBRARY_1_NAME: analytics-lib
  MY_LIBRARY_2_NAME: frontend-lib
  MY_LIBRARY_3_NAME: backend-lib
  GCP_PROJECT_ID: yuyatinnefeld-dev
  CLOUD_SDK_IMAGE_URL: google/cloud-sdk

stages:
  - versioning
  - build
  - upload
  - test

##### versioning #########################################################

increment-version:
  stage: versioning
  image: ${PYTHON_IMAGE}
  before_script:
    - pip install fire
  script:
    # set up ssh
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$GITLAB_SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # check out git repository
    - git config --global user.name "GitLab Runner"
    - git config --global user.email "yuyatinnefeld@gitlab.com"
    - git clone ssh://git@gitlab.com:yuyatinnefeld/artifact-registry.git
    - cd artifact-registry
    # increment version number and commit new version number
    - echo "incrementing fix version number on branch ${BRANCH}..."
    - git checkout ${BRANCH} && git pull
    - export PACKAGE_PATH=${MY_PACKAGES_1_PATH}
    - python ./version.py inc_fix
    - export PACKAGE_PATH=${MY_PACKAGES_2_PATH}
    - python ./version.py inc_fix
    - git add .
    - git commit -m "Incrementing VERSION from my-packages-1 and my-packages-2"
    - git push origin ${BRANCH}
  variables:
    BRANCH: master
  artifacts:
    paths:
      - ${MY_PACKAGES_1_PATH}/VERSION
      - ${MY_PACKAGES_2_PATH}/VERSION
  only:
      - develop
  when: manual

##### build stage #######################################################

before_script:
  - cd ${PYTHON_MAIN_DIR}
  - python -V
  - pip install virtualenv
  - virtualenv --system-site-packages venv
  - source venv/bin/activate
  - pip install --upgrade pip
  - pip install -r requirements.txt

build-analytics-whl:
  stage: build
  image: ${PYTHON_IMAGE}
  script:
    - cd ${MY_PACKAGES_1_PATH}
    - rm -rf dist/*
    - pip install wheel
    - python setup.py bdist_wheel
  artifacts:
    paths:
      - ${PYTHON_MAIN_DIR}/${MY_PACKAGES_1_PATH}/dist/*.whl
      - venv/
  only:
      - develop
  when: manual

build-frontend-whl:
  stage: build
  image: ${PYTHON_IMAGE}
  script:
    - cd ${MY_PACKAGES_2_PATH}
    - rm -rf dist/*
    - pip install wheel
    - python setup.py bdist_wheel
  artifacts:
    paths:
      - ${PYTHON_MAIN_DIR}/${MY_PACKAGES_2_PATH}/dist/*.whl
      - venv/
  only:
      - develop
  when: manual

##### upload stage #######################################################
.upload-packages:
  stage: upload
  image: ${CLOUD_SDK_IMAGE_URL}
  before_script:
    - cd ${PYTHON_MAIN_DIR}
    - gcloud auth activate-service-account --key-file ${GCP_SERVICE_KEY_DEV_SYS}
    - cp ${GCP_SERVICE_KEY_DEV_SYS} ./credentials.json
    - export GOOGLE_APPLICATION_CREDENTIALS=./credentials.json
    - gcloud config set artifacts/repository ${REPO_NAME}
    - gcloud config set artifacts/location ${REGION}
    - gcloud config set project ${GCP_PROJECT_ID}
    - pip install twine keyring keyrings.google-artifactregistry-auth

upload-analytics-packages:
  extends:
    - .upload-packages
  script:
    - gcloud artifacts print-settings python --project=${GCP_PROJECT_ID} --repository=${REPO_NAME} --location=${REGION} --json-key=./credentials.json
    - python3 -m twine upload --repository-url https://${REGION}-python.pkg.dev/${GCP_PROJECT_ID}/${REPO_NAME}/ ${PACKAGES_PATH}/dist/* --verbose
    - gcloud artifacts versions list --package=${LIBRARY_NAME}
  variables:
    PACKAGES_PATH: ${MY_PACKAGES_1_PATH}
    LIBRARY_NAME: ${MY_LIBRARY_1_NAME}
  only:
      - develop
  when: manual

upload-frontend-packages:
  extends:
    - .upload-packages
  script:
    - gcloud artifacts print-settings python --project=${GCP_PROJECT_ID} --repository=${REPO_NAME} --location=${REGION} --json-key=./credentials.json
    - python3 -m twine upload --repository-url https://${REGION}-python.pkg.dev/${GCP_PROJECT_ID}/${REPO_NAME}/ ${PACKAGES_PATH}/dist/* --verbose
    - gcloud artifacts versions list --package=${LIBRARY_NAME}
  variables:
    PACKAGES_PATH: ${MY_PACKAGES_2_PATH}
    LIBRARY_NAME: ${MY_LIBRARY_2_NAME}
  only:
      - develop
  when: manual

# upload with poetry project

.upload-poetry-packages:
  stage: upload
  image: ${CLOUD_SDK_IMAGE_URL}
  before_script:
    - cd ${PYTHON_MAIN_DIR}/${PACKAGES_PATH}
    - gcloud auth activate-service-account --key-file ${GCP_SERVICE_KEY_DEV_SYS}
    - cp ${GCP_SERVICE_KEY_DEV_SYS} ./credentials.json
    - export GOOGLE_APPLICATION_CREDENTIALS=./credentials.json
    - gcloud config set artifacts/repository ${REPO_NAME}
    - gcloud config set artifacts/location ${REGION}
    - gcloud config set project ${GCP_PROJECT_ID}
    - curl -sSL https://install.python-poetry.org | python3 -
    - pip install poetry twine keyring keyrings.google-artifactregistry-auth

upload-backend-packages:
  extends:
    - .upload-poetry-packages
  script:
    - gcloud artifacts print-settings python --project=${GCP_PROJECT_ID} --repository=${REPO_NAME} --location=${REGION} --json-key=./credentials.json
    - poetry config repositories.google https://${REGION}-python.pkg.dev/${GCP_PROJECT_ID}/${REPO_NAME}
    - poetry publish --build -r google
    - gcloud artifacts versions list --package=${LIBRARY_NAME}
  variables:
    PACKAGES_PATH: ${MY_PACKAGES_3_PATH}
    LIBRARY_NAME: ${MY_LIBRARY_3_NAME}
  only:
      - develop
  when: manual



##### test stage #######################################################

.test-packages:
  stage: test
  image: ${CLOUD_SDK_IMAGE_URL}
  before_script:
    - cd ${PYTHON_MAIN_DIR}
    - gcloud auth activate-service-account --key-file ${GCP_SERVICE_KEY_DEV_SYS}
    - cp ${GCP_SERVICE_KEY_DEV_SYS} ./credentials.json
    - export GOOGLE_APPLICATION_CREDENTIALS=./credentials.json
    - gcloud config set artifacts/repository ${REPO_NAME}
    - gcloud config set artifacts/location ${REGION}
    - gcloud config set project ${GCP_PROJECT_ID}
    - pip install keyrings.google-artifactregistry-auth
    - pip install -r requirements.txt

test-analytics-packages:
  extends:
    - .test-packages
  script:
    - pip install --index-url https://${REGION}-python.pkg.dev/${GCP_PROJECT_ID}/${REPO_NAME}/simple/ ${MY_LIBRARY_1_NAME}
    - python3 run_analytics_packages.py
  only:
      - develop
  when: manual

test-frontend-packages:
  extends:
    - .test-packages
  script:
    - pip install --index-url https://${REGION}-python.pkg.dev/${GCP_PROJECT_ID}/${REPO_NAME}/simple/ ${MY_LIBRARY_2_NAME}
    - python3 run_frontend_packages.py
  only:
      - develop
  when: manual

test-backend-packages:
  extends:
    - .test-packages
  script:
    - pip install --index-url https://${REGION}-python.pkg.dev/${GCP_PROJECT_ID}/${REPO_NAME}/simple/ ${MY_LIBRARY_3_NAME}
    - python3 run_backend_packages.py
  only:
      - develop
  when: manual